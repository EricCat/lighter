// Generated by CoffeeScript 1.4.0
(function() {

  module.exports = function(settings) {
    var Blog;
    Blog = (function() {

      function Blog(settings) {
        this.settings = settings;
        this.blog = settings.mongoose.model('blog');
        this.post = settings.mongoose.model('post');
        this.helper = (require(__dirname + '/helper'))();
      }

      Blog.prototype.create = function(obj, callback) {
        var _this = this;
        return this.blog.findOne({
          url: this.settings.url
        }, function(err, data) {
          var blog, post, _i, _len, _ref;
          _ref = obj.posts;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            post = _ref[_i];
            post.title = post.title.trim();
          }
          if (data !== null) {
            return _this._post({
              id: data._id,
              posts: obj.posts
            }, function(data) {
              callback(data);
            });
          } else {
            blog = new _this.blog({
              url: _this.settings.url,
              title: _this.settings.title,
              updated: _this.settings.updated
            });
            return blog.save(function(err, data) {
              if (err === null) {
                return _this._post({
                  id: data._id,
                  posts: obj.posts
                }, function(data) {
                  callback(data);
                });
              }
            });
          }
        });
      };

      Blog.prototype.find = function(callback, format) {
        var _this = this;
        return this.blog.findOne({
          url: this.settings.url
        }, function(err, data) {
          var blog;
          if (err !== null) {
            throw err.message;
          }
          blog = data;
          _this.post.find({
            id: blog._id
          }).sort({
            date: -1
          }).exec(function(err, data) {
            var post, posts, _i, _len;
            posts = [];
            for (_i = 0, _len = data.length; _i < _len; _i++) {
              post = data[_i];
              if (format) {
                post.body = settings.format(post.body);
              }
              posts.push(post);
            }
            return callback({
              id: blog._id,
              url: blog.url,
              title: blog.title,
              updated: blog.updated,
              posts: posts
            });
          });
        });
      };

      Blog.prototype.findMostRecent = function(callback) {
        var _this = this;
        return this.blog.findOne({
          url: this.settings.url
        }, function(err, data) {
          _this.post.find({
            id: data._id
          }).sort({
            date: -1
          }).limit(5).exec(function(err, data) {
            var post, recent, _i, _len;
            recent = [];
            for (_i = 0, _len = data.length; _i < _len; _i++) {
              post = data[_i];
              recent.push({
                title: post.title,
                permaLink: post.permaLink
              });
            }
            return callback(recent);
          });
        });
      };

      Blog.prototype.findPost = function(permaLink, callback, format) {
        var _this = this;
        return this.blog.findOne({
          url: this.settings.url
        }, function(err, data) {
          _this.post.findOne({
            id: data._id,
            permaLink: permaLink
          }, function(err, data) {
            if (format) {
              data.body = _this.settings.format(data.body);
            }
            return callback(data);
          });
        });
      };

      Blog.prototype.findPostById = function(id, callback) {
        var _this = this;
        return this.post.findOne({
          _id: id
        }, function(err, data) {
          return callback(data);
        });
      };

      Blog.prototype["delete"] = function() {
        var _this = this;
        return this.blog.find({
          url: this.settings.url
        }, function(err, data) {
          var blog, _i, _len, _results;
          _results = [];
          for (_i = 0, _len = data.length; _i < _len; _i++) {
            blog = data[_i];
            _results.push(_this.post.remove({
              id: blog._id
            }, function() {
              return _this.blog.remove({
                url: _this.settings.url
              });
            }));
          }
          return _results;
        });
      };

      Blog.prototype._post = function(obj, callback) {
        var link, post, postSchema, _i, _len, _ref, _results;
        _ref = obj.posts;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          post = _ref[_i];
          link = this.helper.linkify(post.title);
          postSchema = new this.post({
            id: obj.id,
            title: post.title,
            permaLink: link,
            author: post.author,
            body: post.body,
            publish: 1,
            date: new Date()
          });
          _results.push(postSchema.save(function(err, data) {
            if (err !== null) {
              callback(err.message);
            }
            callback(data);
          }));
        }
        return _results;
      };

      return Blog;

    })();
    return new Blog(settings);
  };

}).call(this);
